name: docker CICD

on:
  push:
    branches:
      - main

jobs:
  codeql_scan:
    name: Analyze
    # Consider using larger runners for possible analysis time improvements..
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      # required for all workflows
      security-events: write

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: ["python"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Initializes the CodeQL tools for scanning..
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  build_docker_image:
    needs: codeql_scan
    runs-on: ubuntu-latest

    env:
      DOCKERHUB_USERNAME: ${{ secrets.FIRST_DOCKER_NAME}}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASS }}
      imagename: "devsecops_github"
      registry: "docker.io"
      imageTag: "latest"
      SSH_PRIVATE_KEY: ${{ secrets.KEYPAIR }}
      REMOTE_USER: ${{ secrets.SERVER_USER }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      CONTAINER_NAME: "devsecops"

    steps:
      - name: Checkout Code Mutuwa code
        uses: actions/checkout@v2

      - name: Build Noble Django Docker Image
        run: |
          docker build -t ${registry}/${DOCKERHUB_USERNAME}/${imagename}:${imageTag} .

      - name: Push Docker Image to Docker Hub
        run: |
          echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
          docker push ${registry}/${DOCKERHUB_USERNAME}/${imagename}:${imageTag}

  trivy_scan:
    needs: build_docker_image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.18.3/trivy_0.18.3_Linux-64bit.deb
          sudo dpkg -i trivy_0.18.3_Linux-64bit.deb

      - name: Scan Docker Image
        run: |
          trivy_report=$(trivy --format json docker.io/thabsolez/devsecops_github:latest)
          echo "$trivy_report"

          # Check if there are any vulnerabilities with severity "CRITICAL"
          if echo "$trivy_report" | jq '.[0].Vulnerabilities[] | select(.Severity == "CRITICAL")' > /dev/null; then
            echo "Critical vulnerabilities found. Failing the workflow."
            exit 1
          else
            echo "No critical vulnerabilities found. Proceeding with the workflow."
          fi

  deploy_to_server:
    needs: trivy_scan
    runs-on: ubuntu-latest
    # environment:
    #   name: qa
    #   url: http://noble-mutuwa.com/

    steps:
      - name: Deploy to my serer
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.KEYPAIR }}
          REMOTE_HOST: ${{ secrets.SERVER_IP }}
          REMOTE_USER: ${{ secrets.SERVER_USER }}
          TARGET: ${{ secrets.TARGET_DIR }}

      - name: Executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.KEYPAIR }}
          script: |
            docker stop devsecops  || true
            docker rm devsecops || true
            docker pull docker.io/thabsolez/devsecops_github:latest
            docker run -d --name devsecops -p 8000:8000 docker.io/thabsolez/devsecops_github:latest

  qa_send_notification:
    needs: deploy_to_server
    if: needs.deploy_to_server.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Send notification to repository owner
        run: |
          REPO_OWNER=$(jq --raw-output .repository.owner.login "${GITHUB_EVENT_PATH}")
          NOTIFICATION="Deployment qa completed."
          API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/notifications"
          RESPONSE=$(curl -sSL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" -X POST -d "{\"subject\":\"$NOTIFICATION\",\"repository\":\"$REPO_OWNER/$GITHUB_REPOSITORY\"}" "$API_URL")
          echo "Notification sent to repository owner: $REPO_OWNER"
